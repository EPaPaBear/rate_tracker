name: Generate Forecasts

on:
  schedule:
    - cron: "0 * * * *"  # Every hour at minute 0
  workflow_dispatch:        # Allow manual runs

permissions:
  contents: write

jobs:
  forecast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-py3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py3.11-

      - name: Install dependencies
        run: |
          poetry env use python3.11
          poetry install --only=main --no-root

      - name: Generate forecasts
        run: poetry run python accrue_tracker/generate_forecasts.py

      - name: Commit & push DB changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add market_rates.db
          git commit -m "Update forecasts [skip ci]" || echo "No changes to commit"
          git push

      - name: Generate summary
        run: |
          echo "## Forecast Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Database size:** $(ls -lh market_rates.db | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
          poetry run python -c "
          import sqlite3
          conn = sqlite3.connect('market_rates.db')
          rates_count = conn.execute('SELECT COUNT(*) FROM rates').fetchone()[0]
          forecasts_count = conn.execute('SELECT COUNT(*) FROM forecasts').fetchone()[0]
          latest_forecast = conn.execute('SELECT MAX(created_at) FROM forecasts').fetchone()[0]
          conn.close()
          print(f'**Total rate records:** {rates_count}')
          print(f'**Total forecast records:** {forecasts_count}')
          print(f'**Latest forecast:** {latest_forecast}')
          " >> $GITHUB_STEP_SUMMARY
